esphome:
  name: pulseox

esp32:
  board: featheresp32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Pulseox Fallback Hotspot"
    password: "Zj2vvtPFby1A"

captive_portal:

esp32_ble_tracker:

ble_client:
  - mac_address: FF:FF:FF:FF:36:12
    id: lpow_pulseox
    on_connect: # see https://github.com/esphome/esphome/pull/2200#issuecomment-962559276
      then:
        - wait_until: # wait until characteristic is discovered
            lambda: |-
              esphome::ble_client::BLEClient* client = id(lpow_pulseox);
            
              auto service_uuid = 0xFFF0; // can't get it from `sensor` because it is protected
              auto char_uuid = 0xFFF6;    // can't get it from `sensor` because it is protected
              
              esphome::ble_client::BLECharacteristic* chr = client->get_characteristic(service_uuid, char_uuid);
              
              return chr != nullptr;
        - lambda: |-
            ESP_LOGD("ble_client_lambda", "Connected to PulseOx");
            
            esphome::ble_client::BLEClient* client = id(lpow_pulseox);
            
            auto service_uuid = 0xFFF0; // can't get it off `sensor` because it is protected
            auto char_uuid = 0xFFF6;    // can't get it off `sensor` because it is protected
            
            esphome::ble_client::BLECharacteristic* chr = client->get_characteristic(service_uuid, char_uuid);
            
            if (chr == nullptr) {
                ESP_LOGW("ble_client", "[0xFFF6] Characteristic not found.  State update can not be written.");
            } else {
              // 0x0003000000144414 puts it into "multi-value" mode where it streams constantly
              // 0x01030000001445C5 requests a single value (for each sensor) to be emitted
              // unsigned char newVal[8] = {
              //   0x00, 0x03,  0x00, 0x00,
              //   0x00, 0x14, 0x44, 0x14
              // };
              ESP_LOGD("ble_client","Writing to characteristic");
              unsigned char newVal[2] = { 0x01, 0x00 };
              int status = esp_ble_gattc_write_char(
                client->gattc_if,
                client->conn_id,
                chr->handle,
                sizeof(newVal),
                newVal,
                ESP_GATT_WRITE_TYPE_NO_RSP,
                ESP_GATT_AUTH_REQ_NONE
              );
              if (status) {
                ESP_LOGW("ble_client", "Error sending write value to BLE gattc server, status=%d", status);
              }
            }
            auto *descr = client->get_config_descriptor(chr->handle);
            if (descr == nullptr) {
              ESP_LOGW("ble_client", "No descriptor found for notify of handle 0x%x", chr->handle);
              return;
            }
            if (descr->uuid.get_uuid().len != ESP_UUID_LEN_16 ||
                descr->uuid.get_uuid().uuid.uuid16 != ESP_GATT_UUID_CHAR_CLIENT_CONFIG) {
              ESP_LOGW("ble_client", "Handle 0x%x (uuid %s) is not a client config char uuid", chr->handle,
                      descr->uuid.to_string().c_str());
              return;
            }
            uint8_t notify_en = 16;
            auto status = esp_ble_gattc_write_char_descr(client->gattc_if, client->conn_id, descr->handle, sizeof(notify_en),
                                                        &notify_en, ESP_GATT_WRITE_TYPE_RSP, ESP_GATT_AUTH_REQ_NONE);
            if (status) {
              ESP_LOGW("ble_client", "esp_ble_gattc_write_char_descr error, status=%d", status);
            } else {
              ESP_LOGD("ble_client","Wrote %d to descriptor %s",notify_en, descr->uuid.to_string().c_str());
            }
            notify_en = 10;
            status = esp_ble_gattc_write_char_descr(client->gattc_if, client->conn_id, descr->handle, sizeof(notify_en),
                                                        &notify_en, ESP_GATT_WRITE_TYPE_RSP, ESP_GATT_AUTH_REQ_NONE);
            if (status) {
              ESP_LOGW("ble_client", "esp_ble_gattc_write_char_descr error, status=%d", status);
            } else {
              ESP_LOGD("ble_client","Wrote %d to descriptor %s",notify_en, descr->uuid.to_string().c_str());
            }
            notify_en = 1;
            status = esp_ble_gattc_write_char_descr(client->gattc_if, client->conn_id, descr->handle, sizeof(notify_en),
                                                        &notify_en, ESP_GATT_WRITE_TYPE_RSP, ESP_GATT_AUTH_REQ_NONE);
            if (status) {
              ESP_LOGW("ble_client", "esp_ble_gattc_write_char_descr error, status=%d", status);
            } else {
              ESP_LOGD("ble_client","Wrote %d to descriptor %s",notify_en, descr->uuid.to_string().c_str());
            }
            //client->gattc_event_handler(ESP_GATTC_REG_FOR_NOTIFY_EVT,ESP_GATT_IF_NONE,)
            /*
              Debug `some_var`'s type at compile time with:
              
                  decltype(some_var)::foo = 1;
            */

# output:
#   - platform: ble_client
#     ble_client_id: lpow_pulseox
#     id: pulseox_output
#     service_uuid: "fff0"
#     characteristic_uuid: "0000fff6-0000-1000-8000-00805f9b34fb"

sensor:
  - platform: template
    name: PulseOx SpO2
    unit_of_measurement: '%'
    id: spo2
    accuracy_decimals: 0
  - platform: template
    name: PulseOx Heart Rate
    unit_of_measurement: 'BPM'
    id: bpm
    accuracy_decimals: 0
  - platform: template
    name: PulseOx Perfusion Index
    unit_of_measurement: '%'
    id: pi
    accuracy_decimals: 1
  - platform: ble_client
    ble_client_id: lpow_pulseox
    id: pulseox_sensor
    service_uuid: 'fff0'
    characteristic_uuid: 'fff6'
    descriptor_uuid: '2902'
    notify: true
    lambda: !lambda |-
      int packet_size = x.size();
      ESP_LOGD("main","Packet size: %d",packet_size);
      if (packet_size == 7) {
        ESP_LOGD("main","Packet: %d",x[0]);
        if ((float)x[0] == 241.0) {
          id(spo2).publish_state((float)x[1]);
          id(bpm).publish_state((float)x[2]);
          id(pi).publish_state((float)x[4]/10.0);
        }
      } else {
        if (packet_size > 1) {
          for(int i=0;i<packet_size;i++) {
            ESP_LOGD("main","Value %d: %d",i,x[i]);
          }
        }
      }
      return (float)packet_size;
