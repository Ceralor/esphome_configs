substitutions:
  name: m5stack-atom-echo-8046b4
  friendly_name: Bedroom Speaker
  weather_entity: weather.pirateweather
esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
  min_version: 2024.9.0
  # on_boot:
  #   then:
  #    - lambda: |-
  #       std::map<char, char> m{
  #         {"clear-night", "\uef44"},
  #         {"cloudy", "\ue2bd"},
  #         {"exceptional", "\uf3cc"},
  #         {"fog", "\ue818"},
  #         {"hail", "\uf67f"},
  #         {"lightning", "\uea0b"},
  #         {"lightning-rainy", "\uebdb"},
  #         {"partlycloudy", "\uf172"},
  #         {"pouring", "\uf61f"},
  #         {"rainy", "\uf61e"},
  #         {"snowy", "\ue80f"},
  #         {"snowy-rainy", "\uf61d"},
  #         {"sunny", "\ue81a"},
  #         {"windy", "\uefd8"},
  #         {"windy-variant", "\ue29c"}
  #       };
esp32:
  board: m5stack-atom
  framework:
    type: esp-idf

logger:
  level: INFO
  logs:
    number: WARN
    display: ERROR

ota:
  platform: esphome
  password: !secret esphome_ota

api:
  encryption:
    key: !secret esphome_encryption
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

button:
  - platform: safe_mode
    id: button_safe_mode
    name: Safe Mode Boot

  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO33
    i2s_bclk_pin: GPIO19

microphone:
  - platform: i2s_audio
    id: echo_microphone
    i2s_din_pin: GPIO23
    adc_type: external
    pdm: true

speaker:
  - platform: i2s_audio
    id: echo_speaker
    i2s_dout_pin: GPIO22
    dac_type: external
    channel: mono

voice_assistant:
  id: va
  microphone: echo_microphone
  speaker: echo_speaker
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  vad_threshold: 3
  on_listening:
    - switch.turn_on: is_listening
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Slow Pulse"
  on_stt_vad_end:
    - switch.turn_off: is_listening
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Fast Pulse"
  on_tts_start:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        brightness: 100%
        effect: none
  on_end:
    - delay: 100ms
    - wait_until:
        not:
          speaker.is_playing:
    - script.execute: reset_led
  on_error:
    - light.turn_on:
        id: led
        red: 100%
        green: 0%
        blue: 0%
        brightness: 100%
        effect: none
    - delay: 1s
    - script.execute: reset_led
  on_client_connected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:
          - script.execute: reset_led
  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop:
          - light.turn_off: led
  on_timer_finished:
    - voice_assistant.stop:
    - switch.turn_on: timer_ringing
    - wait_until:
        not:
          microphone.is_capturing:
    - light.turn_on:
        id: led
        red: 0%
        green: 100%
        blue: 0%
        brightness: 100%
        effect: "Fast Pulse"
    - while:
        condition:
          switch.is_on: timer_ringing
        then:
          - lambda: id(echo_speaker).play(id(timer_finished_wave_file), sizeof(id(timer_finished_wave_file)));
          - delay: 1s
    - wait_until:
        not:
          speaker.is_playing:
    - light.turn_off: led
    - switch.turn_off: timer_ringing
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:
          - script.execute: reset_led
  on_timer_started:
    - display.page.show: page_timer

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: Button
    disabled_by_default: true
    entity_category: diagnostic
    id: echo_button
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_multi_click:
      - timing:
          - ON for at least 2s
        then:
          - if:
              condition:
                display_menu.is_active:
              then:
                - display_menu.hide:
              else:
                - display_menu.show_main:
      - timing:
          - ON for 800ms to 1700ms
        then:
          - if:
              condition:
                display_menu.is_active:
              then:
                - display_menu.enter:
              else:
                - display.page.show_next: the_display
                - component.update: the_display
      - timing:
          - ON for at most 350ms
        then:
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - if:
                    condition:
                      display_menu.is_active:
                    then:
                      - display_menu.down:
                    else:
                    - if:
                        condition:
                          switch.is_off: use_wake_word
                        then:
                          - if:
                              condition: voice_assistant.is_running
                              then:
                                - voice_assistant.stop:
                                - script.execute: reset_led
                              else:
                                - voice_assistant.start:
                        else:
                          - voice_assistant.stop
                          - delay: 1s
                          - script.execute: reset_led
                          - script.wait: reset_led
                          - voice_assistant.start_continuous:
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn
light:
  - platform: esp32_rmt_led_strip
    id: led
    name: None
    disabled_by_default: true
    entity_category: config
    pin: GPIO27
    default_transition_length: 0s
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    rmt_channel: 0
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

script:
  - id: reset_led
    then:
      - if:
          condition:
            - switch.is_on: use_wake_word
            - switch.is_on: use_listen_light
          then:
            - light.turn_on:
                id: led
                red: 100%
                green: 89%
                blue: 71%
                brightness: 60%
                effect: none
          else:
            - light.turn_off: led

switch:
  - platform: template
    name: Use wake word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
      - script.execute: reset_led
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - script.execute: reset_led
  - platform: template
    name: Use listen light
    id: use_listen_light
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - script.execute: reset_led
    on_turn_off:
      - script.execute: reset_led
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: 15min
      - switch.turn_off: timer_ringing
    on_turn_off: 
      then:
        - display.page.show: page_time
  - platform: template
    id: is_listening
    optimistic: true
    internal: true
  - platform: template
    id: alarm_set
    name: Alarm Set
    restore_mode: RESTORE_DEFAULT_OFF
    # entity_category: config
    optimistic: true
  - platform: template
    id: show_weather
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true

datetime:
  - platform: template
    type: time
    id: alarm_time
    name: Alarm Time
    # entity_category: config
    restore_value: true
    initial_value: "00:00:00"
    time_id: the_time
    set_action:
      - switch.turn_on: alarm_set
    on_time:
      then:
        - logger.log: "Alarm triggered!"
        - if:
            condition:
              - switch.is_on: alarm_set
            then:
              - switch.turn_on: timer_ringing
              - light.turn_on:
                  id: led
                  red: 0%
                  green: 100%
                  blue: 0%
                  brightness: 100%
                  effect: "Fast Pulse"
              - while:
                  condition:
                    switch.is_on: timer_ringing
                  then:
                    - lambda: id(echo_speaker).play(id(timer_finished_wave_file), sizeof(id(timer_finished_wave_file)));
                    - delay: 1s
              - wait_until:
                  not:
                    speaker.is_playing:
              - light.turn_off: led
              - switch.turn_off: timer_ringing
            

external_components:
  - source: github://pr#5230
    components:
      - esp_adf
    refresh: 0s
  - source: github://jesserockz/esphome-components
    components: [file]
    refresh: 0s

esp_adf:

file:
  - id: timer_finished_wave_file
    file: https://github.com/esphome/firmware/raw/main/voice-assistant/sounds/timer_finished.wav

i2c:
  sda: GPIO21
  scl: GPIO25
  frequency: 800kHz

font:
  - file: "gfonts://Share+Tech+Mono"
    id: font_time
    size: 40
  - file: "gfonts://VT323"
    id: font_smaller
    size: 20
    extras:
    - file: "gfonts://Material+Symbols+Outlined"
      glyphs: [
        "\ue425", # timer
        "\ue7f4", # alarm
        "\ue029", # microphone
        "\uf5d1", # multiple microphones
        # Weather
        "\uef44", # clear-night
        "\ue2bd", # cloudy
        "\uf3cc", # exceptional
        "\ue818", # fog
        "\uf67f", # hail
        "\uea0b", # lightning
        "\uebdb", # lightning-rainy
        "\uf172", # partlycloudy
        "\uf61f", # pouring
        "\uf61e", # rainy
        "\ue80f", # snowy
        "\uf61d", # snowy-rainy
        "\ue81a", # sunny
        "\uefd8", # windy
        "\ue29c", # windy-variant
      ]
time:
  # - platform: homeassistant
  #   id: the_time
  - platform: sntp
    id: the_time
    timezone: America/Chicago
    servers:
     - 10.2.1.1
     - 192.168.1.1

number:
  - platform: template
    id: alarm_minute
    internal: true
    min_value: 0
    max_value: 60
    step: 1
    lambda: |-
      return id(alarm_time).minute;
    update_interval: 1s
    set_action:
      - datetime.time.set:
          id: alarm_time
          time: !lambda |-
            uint8_t hour = id(alarm_time).minute;
            uint8_t minute = int(x) % 60;
            return {.second = 0, .minute = minute, .hour = hour};
  - platform: template
    id: alarm_hour
    internal: true
    min_value: 0
    max_value: 24
    step: 1
    lambda: |-
      return id(alarm_time).hour;
    update_interval: 1s
    set_action:
      - datetime.time.set:
          id: alarm_time
          time: !lambda |-
            uint8_t hour = int(x) % 24;
            uint8_t minute = id(alarm_time).minute;
            return {.second = 0, .minute = minute, .hour = hour};

graphical_display_menu:
  id: the_menu
  display: the_display
  on_redraw:
    then:
      - component.update: the_display
  active: false
  mode: rotary
  font: font_smaller
  items:
    - type: menu
      text: 'Alarm Setup'
      items:
        - type: switch
          immediate_edit: true
          text: 'Alarm'
          switch: alarm_set
        - type: number
          text: 'Hour'
          number: alarm_hour
          format: "%2.0f"
          immediate_edit: true
        - type: number
          text: 'Minute'
          number: alarm_minute
          format: "%2.0f"
          immediate_edit: true
        - type: back
          text: 'Back'
    - type: switch
      immediate_edit: true
      text: 'Wake Word'
      switch: use_wake_word
    - type: switch
      immediate_edit: true
      text: !lambda |-
        return "\ue029 Light";
      switch: use_listen_light
    - type: switch
      immediate_edit: true
      text: 'Weather'
      switch: show_weather
    - type: command
      text: 'Exit'
      on_value:
        then:
          - display_menu.hide:
      
display:
  - platform: ssd1306_i2c
    id: the_display
    model: "SSD1306 128x64"
    flip_y: false
    flip_x: false
    address: 0x3C
    pages:
      - id: page_time
        lambda: |-
          it.strftime(110, 0, id(font_time), TextAlign::TOP_RIGHT, ((id(the_time).now().second % 4 < 2) ? "%l:%M" : "%l %M"), id(the_time).now());
          it.printf(it.get_width()-2, 36, id(font_smaller), TextAlign::BOTTOM_RIGHT, "%c", id(the_time).now().strftime("%P")[0]);
          if (id(show_weather).state) {
            std::map<std::string, std::string> weather_icon_map
              {
                {"clear-night", "\uef44"},
                {"cloudy", "\ue2bd"},
                {"exceptional", "\uf3cc"},
                {"fog", "\ue818"},
                {"hail", "\uf67f"},
                {"lightning", "\uea0b"},
                {"lightning-rainy", "\uebdb"},
                {"partlycloudy", "\uf172"},
                {"pouring", "\uf61f"},
                {"rainy", "\uf61e"},
                {"snowy", "\ue80f"},
                {"snowy-rainy", "\uf61d"},
                {"sunny", "\ue81a"},
                {"windy", "\uefd8"},
                {"windy-variant", "\ue29c"}
              };
            it.printf(0, 38, id(font_smaller),"%s%3.0f°", weather_icon_map[id(weather_condition).state.c_str()].c_str(), id(weather_temp).state);
          }
          if (id(va).is_continuous()) {
            it.print(80, 40, id(font_smaller), "\ue029");
          } else if (id(va).is_running()) {
            it.print(80, 40, id(font_smaller), "\uf5d1");
          }
          if (!id(va).get_timers().empty()) {
            it.print(60, 40, id(font_smaller), "\ue425");
          }
          if (id(alarm_set).state) {
            it.print(it.get_width()-2, it.get_height()-2, id(font_smaller), TextAlign::BOTTOM_RIGHT, "\ue7f4");
          }
      - id: page_timer
        lambda: |-
          auto timers = id(va).get_timers();
          int minutes = 0;
          int seconds = 0;
          if (!timers.empty()) {
            minutes = timers[0].seconds_left / 60; 
            seconds = timers[0].seconds_left % 60;
          }
          it.printf(it.get_width(), 0, id(font_time), TextAlign::TOP_RIGHT, "%d:%02d", minutes, seconds);

text_sensor:
  # - platform: template
  #   id: timer_time
  #   lambda: |-
  #     return {};
  # - platform: homeassistant
  #   id: weather_tempunit
  #   entity_id: ${weather_entity}
  #   attribute: temperature_unit
  - platform: homeassistant
    id: weather_condition
    entity_id: ${weather_entity}

sensor:
  - platform: homeassistant
    id: weather_temp
    entity_id: ${weather_entity}
    attribute: temperature

interval:
  - interval: 5s
    then:
      - if:
          condition:
            - lambda: return !id(va).get_timers().empty();
          then:
            - display.page.show_next: the_display