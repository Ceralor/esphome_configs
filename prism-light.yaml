esphome:
  name: prism-light
  platform: ESP8266
  board: esp01_1m

packages:
  common: !include base/common.template.yaml

api:
  services:
    - service: set_manual_effect
      variables:
        effect_string: string
      then:
        - lambda: |-
            id(set_pattern).execute(effect_string);

uart:
   rx_pin: GPIO3
   tx_pin: GPIO1
   baud_rate: 9600
tuya:
  time_id: esptime
  on_datapoint_update:
    - sensor_datapoint: 21
      datapoint_type: enum
      then:
        - lambda: |-
            if (x < 2) {
              id(blank_effect).execute();
            }

# power: 20
# brightness: 22
#   range: 10-1000
# color_temp: 23
#   range: 2700-6500
# color_mode: 21
#   0: white
#   1: color
#   2: scene
#   3: music
# color: 24
# scene: 101
#   Note: every value is a hex string representation of the byte for the value
#   id: any byte
#   sp: speed, 0-100
#   mo: mode
#     0: fade
#     1: flash
#     2: music
#   pt: pattern, index of [solid,up,down,center,stripe,out,in,rot,spiral]
#   HSV: 0-360, 0-1000, 10-1000
#   effect_bytes: {id}{sp}{mo}{pt}[colors:{hue}{sat}{vals}0000]

script:
  - id: set_pattern
    parameters:
      new_pattern: string
    then:
      - lambda: |-
          tuya_tuya->set_string_datapoint_value(101, new_pattern);
          tuya_tuya->set_enum_datapoint_value(21,2);
  - id: stop_pattern
    then:
      - lambda: |-
          tuya_tuya->set_enum_datapoint_value(21,1);
  - id: blank_effect
    then:
      - lambda: |-
          auto call = id(prism).turn_on();
          call.set_effect("None");
          call.perform();
button:
  - platform: template
    name: Stop Pattern
    on_press:
      - script.execute: stop_pattern
      - script.execute: blank_effect

light:
  - platform: tuya
    name: Prism
    id: prism
    icon: 'mdi:triangle-outline'
    switch_datapoint: 20
    dimmer_datapoint: 22
    color_type: hsv
    color_datapoint: 24
    color_temperature_datapoint: 23
    color_temperature_max_value: 255
    min_value: 25
    max_value: 1000
    cold_white_color_temperature: 6500K
    warm_white_color_temperature: 2700K
    color_interlock: true
    # on_state: # This isn't working correctly yet because it'll fire repeatedly and screw up color->white, softlock basically
    #   - if:
    #       condition:
    #         lambda: 'return id(prism).get_effect_name() == "None";'
    #       then:
    #         - script.execute: stop_pattern
select:
  - platform: template
    name: SceneOption
    optimistic: true
      # Hypnotize, Vortex, and Sunset are all normally built-in; haven't tried invoking directly by ID
      # Hyperion is custom as an example of a custom one.
      # Would really like to figure out how to get addressable color selection working in HA:
      #   Pick multiple colors, speed, mode, animation pattern, and it works
    options:
      - Hyperion
      - Hypnotize
      - Vortex
      - Sunset
      - Frigid
    set_action:
      - lambda: |-
          if (x == "Hyperion") id(set_pattern)->execute("10320003001c03e803e800000000012c03c003e80000000000c703e803e800000000");
          if (x == "Hypnotize") id(set_pattern)->execute("083c0001000003e803e800000000001e03e803e800000000003c03e803e800000000007803e803e80000000000b403e803e80000000000f003e803e800000000010e03e803e800000000012c03e803e800000000");
          if (x == "Vortex") id(set_pattern)->execute("09640008000003e803e800000000001e03e803e800000000003c03e803e800000000007803e803e80000000000b403e803e80000000000f003e803e800000000010e03e803e800000000012c03e803e800000000");
          if (x == "Sunset") id(set_pattern)->execute("0b280002000003e803e800000000000003e803e800000000001e03e803e800000000001e03e803e800000000003c03e803e800000000003c03e803e800000000");
          if (x == "Frigid") id(set_pattern)->execute("0c28000100b403e803e80000000000f003e803e800000000010e03e803e8000000000000000003e800000000");